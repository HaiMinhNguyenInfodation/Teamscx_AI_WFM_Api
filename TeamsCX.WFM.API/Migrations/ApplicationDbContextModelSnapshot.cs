// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using TeamsCX.WFM.API.Data;

#nullable disable

namespace TeamsCX.WFM.API.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("TeamsCX.WFM.API.Models.Agent", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("DisplayName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Email")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<bool>("IsReported")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<string>("MicrosoftUserId")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("MicrosoftUserId")
                        .IsUnique();

                    b.ToTable("Agents");
                });

            modelBuilder.Entity("TeamsCX.WFM.API.Models.AgentActiveHistory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("AgentId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActived")
                        .HasColumnType("bit");

                    b.Property<int?>("QueueId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AgentId");

                    b.HasIndex("CreatedAt");

                    b.HasIndex("QueueId");

                    b.ToTable("AgentActiveHistories");
                });

            modelBuilder.Entity("TeamsCX.WFM.API.Models.AgentStatusHistory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AgentId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AgentId");

                    b.HasIndex("CreatedAt");

                    b.ToTable("AgentStatusHistories");
                });

            modelBuilder.Entity("TeamsCX.WFM.API.Models.CallActivity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Activity")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("Id");

                    b.ToTable("CallActivities");
                });

            modelBuilder.Entity("TeamsCX.WFM.API.Models.CallActivityMapping", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ActivityId")
                        .HasColumnType("int");

                    b.Property<int>("CallId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("EndTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("StartTime")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("ActivityId");

                    b.HasIndex("CallId");

                    b.ToTable("CallActivityMappings");
                });

            modelBuilder.Entity("TeamsCX.WFM.API.Models.CallConnectedUser", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AgentId")
                        .HasColumnType("int");

                    b.Property<int>("CallId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("EndTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("ExternalUserPhoneNumber")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateTime>("StartTime")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("AgentId");

                    b.HasIndex("CallId");

                    b.ToTable("CallConnectedUsers");
                });

            modelBuilder.Entity("TeamsCX.WFM.API.Models.CallDirection", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Direction")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("Direction")
                        .IsUnique();

                    b.ToTable("CallDirections");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Direction = "Inbound"
                        },
                        new
                        {
                            Id = 2,
                            Direction = "Outbound"
                        });
                });

            modelBuilder.Entity("TeamsCX.WFM.API.Models.CallHuntedUser", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AgentId")
                        .HasColumnType("int");

                    b.Property<int>("CallId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("EndTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("ExternalUserPhoneNumber")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateTime>("StartTime")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("AgentId");

                    b.HasIndex("CallId");

                    b.ToTable("CallHuntedUsers");
                });

            modelBuilder.Entity("TeamsCX.WFM.API.Models.CallOutcome", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Outcome")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("Outcome")
                        .IsUnique();

                    b.ToTable("CallOutcomes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Outcome = "Answered"
                        },
                        new
                        {
                            Id = 2,
                            Outcome = "Missed"
                        },
                        new
                        {
                            Id = 3,
                            Outcome = "Abandoned"
                        },
                        new
                        {
                            Id = 4,
                            Outcome = "Inprogress"
                        });
                });

            modelBuilder.Entity("TeamsCX.WFM.API.Models.CallQueueReported", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("AccessTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("CallId")
                        .HasColumnType("int");

                    b.Property<int>("QueueId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CallId");

                    b.HasIndex("QueueId");

                    b.ToTable("CallQueues");
                });

            modelBuilder.Entity("TeamsCX.WFM.API.Models.CallStatus", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("Status")
                        .IsUnique();

                    b.ToTable("CallStatuses");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Status = "Waiting"
                        },
                        new
                        {
                            Id = 2,
                            Status = "Connected"
                        },
                        new
                        {
                            Id = 3,
                            Status = "Ended"
                        });
                });

            modelBuilder.Entity("TeamsCX.WFM.API.Models.Caller", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("CallerCompany")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("CallerDisplayName")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("CallerName")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("CallerPhoneNumber")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("CallerPrincipalName")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("Id");

                    b.ToTable("Callers");
                });

            modelBuilder.Entity("TeamsCX.WFM.API.Models.Calls", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CallDirectionId")
                        .HasColumnType("int");

                    b.Property<double>("CallDuration")
                        .HasColumnType("float");

                    b.Property<string>("CallId")
                        .IsRequired()
                        .HasMaxLength(24)
                        .HasColumnType("nvarchar(24)");

                    b.Property<int>("CallOutcomeId")
                        .HasColumnType("int");

                    b.Property<int>("CallStatusId")
                        .HasColumnType("int");

                    b.Property<int?>("CallerId")
                        .HasColumnType("int");

                    b.Property<bool>("Connected")
                        .HasColumnType("bit");

                    b.Property<double>("ConnectedDuration")
                        .HasColumnType("float");

                    b.Property<bool>("Hunted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsForceEnded")
                        .HasColumnType("bit");

                    b.Property<DateTime>("LastUpdated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("StartedAt")
                        .HasColumnType("datetime2");

                    b.Property<double>("WaitingDuration")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("CallDirectionId");

                    b.HasIndex("CallOutcomeId");

                    b.HasIndex("CallStatusId");

                    b.HasIndex("CallerId");

                    b.ToTable("Calls");
                });

            modelBuilder.Entity("TeamsCX.WFM.API.Models.Classification", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AgentId")
                        .HasColumnType("int");

                    b.Property<int>("CallId")
                        .HasColumnType("int");

                    b.Property<string>("Tags")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("AgentId");

                    b.HasIndex("CallId");

                    b.ToTable("Classifications");
                });

            modelBuilder.Entity("TeamsCX.WFM.API.Models.Forecast", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AgentCapacityAfternoon")
                        .HasColumnType("int");

                    b.Property<int>("AgentCapacityMorning")
                        .HasColumnType("int");

                    b.Property<int>("CallForecastAfternoon")
                        .HasColumnType("int");

                    b.Property<int>("CallForecastMorning")
                        .HasColumnType("int");

                    b.Property<decimal>("CallPerAgentAfternoon")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("CallPerAgentMorning")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DayOfForecast")
                        .HasColumnType("datetime2");

                    b.Property<string>("ForecastPeriod")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<int>("MaxCallForecastOnHourAfternoon")
                        .HasColumnType("int");

                    b.Property<int>("MaxCallForecastOnHourMorning")
                        .HasColumnType("int");

                    b.Property<int>("OpenShiftNeedAfternoon")
                        .HasColumnType("int");

                    b.Property<int>("OpenShiftNeedMorning")
                        .HasColumnType("int");

                    b.Property<int>("QueueId")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("QueueId");

                    b.ToTable("Forecast");
                });

            modelBuilder.Entity("TeamsCX.WFM.API.Models.Note", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AgentId")
                        .HasColumnType("int");

                    b.Property<int>("CallId")
                        .HasColumnType("int");

                    b.Property<string>("NoteContent")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("AgentId");

                    b.HasIndex("CallId");

                    b.ToTable("Notes");
                });

            modelBuilder.Entity("TeamsCX.WFM.API.Models.Queue", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MicrosoftQueueId")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("MicrosoftQueueId")
                        .IsUnique();

                    b.ToTable("Queues");
                });

            modelBuilder.Entity("TeamsCX.WFM.API.Models.QueueReportedAgent", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AgentId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<int>("QueueId")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETDATE()");

                    b.HasKey("Id");

                    b.HasIndex("AgentId");

                    b.HasIndex("QueueId");

                    b.ToTable("QueueReportedAgents");
                });

            modelBuilder.Entity("TeamsCX.WFM.API.Models.QueueTeam", b =>
                {
                    b.Property<int>("QueueId")
                        .HasColumnType("int")
                        .HasColumnOrder(0);

                    b.Property<int>("TeamId")
                        .HasColumnType("int")
                        .HasColumnOrder(1);

                    b.HasKey("QueueId", "TeamId");

                    b.HasIndex("TeamId");

                    b.ToTable("QueueTeams");
                });

            modelBuilder.Entity("TeamsCX.WFM.API.Models.ScheduleShift", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AgentId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("EndDateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("MicrosoftShiftId")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Notes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("SchedulingGroupId")
                        .HasColumnType("int");

                    b.Property<DateTime>("StartDateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Theme")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("AgentId");

                    b.HasIndex("MicrosoftShiftId")
                        .IsUnique();

                    b.HasIndex("SchedulingGroupId");

                    b.ToTable("ScheduleShifts");
                });

            modelBuilder.Entity("TeamsCX.WFM.API.Models.SchedulingGroup", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("DisplayName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("MicrosoftGroupId")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("MicrosoftGroupId")
                        .IsUnique();

                    b.ToTable("SchedulingGroups");
                });

            modelBuilder.Entity("TeamsCX.WFM.API.Models.Team", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DisplayName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("MicrosoftTeamId")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("OwnerId")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("MicrosoftTeamId")
                        .IsUnique();

                    b.ToTable("Teams");
                });

            modelBuilder.Entity("TeamsCX.WFM.API.Models.TeamAgent", b =>
                {
                    b.Property<int>("TeamId")
                        .HasColumnType("int")
                        .HasColumnOrder(0);

                    b.Property<int>("AgentId")
                        .HasColumnType("int")
                        .HasColumnOrder(1);

                    b.HasKey("TeamId", "AgentId");

                    b.HasIndex("AgentId");

                    b.ToTable("TeamAgents");
                });

            modelBuilder.Entity("TeamsCX.WFM.API.Models.TeamSchedulingGroup", b =>
                {
                    b.Property<int>("TeamId")
                        .HasColumnType("int")
                        .HasColumnOrder(0);

                    b.Property<int>("SchedulingGroupId")
                        .HasColumnType("int")
                        .HasColumnOrder(1);

                    b.HasKey("TeamId", "SchedulingGroupId");

                    b.HasIndex("SchedulingGroupId");

                    b.ToTable("TeamSchedulingGroups");
                });

            modelBuilder.Entity("TeamsCX.WFM.API.Models.AgentActiveHistory", b =>
                {
                    b.HasOne("TeamsCX.WFM.API.Models.Agent", "Agent")
                        .WithMany()
                        .HasForeignKey("AgentId");

                    b.HasOne("TeamsCX.WFM.API.Models.Queue", "Queue")
                        .WithMany()
                        .HasForeignKey("QueueId");

                    b.Navigation("Agent");

                    b.Navigation("Queue");
                });

            modelBuilder.Entity("TeamsCX.WFM.API.Models.AgentStatusHistory", b =>
                {
                    b.HasOne("TeamsCX.WFM.API.Models.Agent", "Agent")
                        .WithMany()
                        .HasForeignKey("AgentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Agent");
                });

            modelBuilder.Entity("TeamsCX.WFM.API.Models.CallActivityMapping", b =>
                {
                    b.HasOne("TeamsCX.WFM.API.Models.CallActivity", "CallActivity")
                        .WithMany("CallActivityMappings")
                        .HasForeignKey("ActivityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TeamsCX.WFM.API.Models.Calls", "Call")
                        .WithMany("CallActivityMappings")
                        .HasForeignKey("CallId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Call");

                    b.Navigation("CallActivity");
                });

            modelBuilder.Entity("TeamsCX.WFM.API.Models.CallConnectedUser", b =>
                {
                    b.HasOne("TeamsCX.WFM.API.Models.Agent", "Agent")
                        .WithMany()
                        .HasForeignKey("AgentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TeamsCX.WFM.API.Models.Calls", "Call")
                        .WithMany("CallConnectedUsers")
                        .HasForeignKey("CallId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Agent");

                    b.Navigation("Call");
                });

            modelBuilder.Entity("TeamsCX.WFM.API.Models.CallHuntedUser", b =>
                {
                    b.HasOne("TeamsCX.WFM.API.Models.Agent", "Agent")
                        .WithMany()
                        .HasForeignKey("AgentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TeamsCX.WFM.API.Models.Calls", "Call")
                        .WithMany("CallHuntedUsers")
                        .HasForeignKey("CallId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Agent");

                    b.Navigation("Call");
                });

            modelBuilder.Entity("TeamsCX.WFM.API.Models.CallQueueReported", b =>
                {
                    b.HasOne("TeamsCX.WFM.API.Models.Calls", "Call")
                        .WithMany("CallQueues")
                        .HasForeignKey("CallId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TeamsCX.WFM.API.Models.Queue", "Queue")
                        .WithMany()
                        .HasForeignKey("QueueId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Call");

                    b.Navigation("Queue");
                });

            modelBuilder.Entity("TeamsCX.WFM.API.Models.Calls", b =>
                {
                    b.HasOne("TeamsCX.WFM.API.Models.CallDirection", "CallDirection")
                        .WithMany()
                        .HasForeignKey("CallDirectionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TeamsCX.WFM.API.Models.CallOutcome", "CallOutcome")
                        .WithMany()
                        .HasForeignKey("CallOutcomeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TeamsCX.WFM.API.Models.CallStatus", "CallStatus")
                        .WithMany()
                        .HasForeignKey("CallStatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TeamsCX.WFM.API.Models.Caller", "Caller")
                        .WithMany()
                        .HasForeignKey("CallerId");

                    b.Navigation("CallDirection");

                    b.Navigation("CallOutcome");

                    b.Navigation("CallStatus");

                    b.Navigation("Caller");
                });

            modelBuilder.Entity("TeamsCX.WFM.API.Models.Classification", b =>
                {
                    b.HasOne("TeamsCX.WFM.API.Models.Agent", "Agent")
                        .WithMany()
                        .HasForeignKey("AgentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TeamsCX.WFM.API.Models.Calls", "Call")
                        .WithMany("Classifications")
                        .HasForeignKey("CallId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Agent");

                    b.Navigation("Call");
                });

            modelBuilder.Entity("TeamsCX.WFM.API.Models.Forecast", b =>
                {
                    b.HasOne("TeamsCX.WFM.API.Models.Queue", "Queue")
                        .WithMany("Forecasts")
                        .HasForeignKey("QueueId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Queue");
                });

            modelBuilder.Entity("TeamsCX.WFM.API.Models.Note", b =>
                {
                    b.HasOne("TeamsCX.WFM.API.Models.Agent", "Agent")
                        .WithMany()
                        .HasForeignKey("AgentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TeamsCX.WFM.API.Models.Calls", "Call")
                        .WithMany("Notes")
                        .HasForeignKey("CallId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Agent");

                    b.Navigation("Call");
                });

            modelBuilder.Entity("TeamsCX.WFM.API.Models.QueueReportedAgent", b =>
                {
                    b.HasOne("TeamsCX.WFM.API.Models.Agent", "Agent")
                        .WithMany()
                        .HasForeignKey("AgentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TeamsCX.WFM.API.Models.Queue", "Queue")
                        .WithMany()
                        .HasForeignKey("QueueId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Agent");

                    b.Navigation("Queue");
                });

            modelBuilder.Entity("TeamsCX.WFM.API.Models.QueueTeam", b =>
                {
                    b.HasOne("TeamsCX.WFM.API.Models.Queue", "Queue")
                        .WithMany()
                        .HasForeignKey("QueueId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TeamsCX.WFM.API.Models.Team", "Team")
                        .WithMany()
                        .HasForeignKey("TeamId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Queue");

                    b.Navigation("Team");
                });

            modelBuilder.Entity("TeamsCX.WFM.API.Models.ScheduleShift", b =>
                {
                    b.HasOne("TeamsCX.WFM.API.Models.Agent", "Agent")
                        .WithMany()
                        .HasForeignKey("AgentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TeamsCX.WFM.API.Models.SchedulingGroup", "SchedulingGroup")
                        .WithMany()
                        .HasForeignKey("SchedulingGroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Agent");

                    b.Navigation("SchedulingGroup");
                });

            modelBuilder.Entity("TeamsCX.WFM.API.Models.TeamAgent", b =>
                {
                    b.HasOne("TeamsCX.WFM.API.Models.Agent", "Agent")
                        .WithMany()
                        .HasForeignKey("AgentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TeamsCX.WFM.API.Models.Team", "Team")
                        .WithMany()
                        .HasForeignKey("TeamId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Agent");

                    b.Navigation("Team");
                });

            modelBuilder.Entity("TeamsCX.WFM.API.Models.TeamSchedulingGroup", b =>
                {
                    b.HasOne("TeamsCX.WFM.API.Models.SchedulingGroup", "SchedulingGroup")
                        .WithMany()
                        .HasForeignKey("SchedulingGroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TeamsCX.WFM.API.Models.Team", "Team")
                        .WithMany()
                        .HasForeignKey("TeamId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SchedulingGroup");

                    b.Navigation("Team");
                });

            modelBuilder.Entity("TeamsCX.WFM.API.Models.CallActivity", b =>
                {
                    b.Navigation("CallActivityMappings");
                });

            modelBuilder.Entity("TeamsCX.WFM.API.Models.Calls", b =>
                {
                    b.Navigation("CallActivityMappings");

                    b.Navigation("CallConnectedUsers");

                    b.Navigation("CallHuntedUsers");

                    b.Navigation("CallQueues");

                    b.Navigation("Classifications");

                    b.Navigation("Notes");
                });

            modelBuilder.Entity("TeamsCX.WFM.API.Models.Queue", b =>
                {
                    b.Navigation("Forecasts");
                });
#pragma warning restore 612, 618
        }
    }
}
