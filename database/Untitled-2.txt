Could you help me to create: 
     
    Backend with C# in Visual Studio 2022 and I already have the DB with structure in file "CreateDatabase.sql"
    
  
    Below is the list of API that I need this data to insert into the DB: 
    1. API_1: Get access token, use this token for all other API(API_2, API_3, API_4, API_5)
    POST: https://login.microsoftonline.com/967731f1-e365-496e-b378-fcb5b0c71157/oauth2/v2.0/token
    Request:
      Header: 
        grant_type: client_credentials
        client_id: <client_id>
        client_secret: <client_secret>
        tenant_id: 967731f1-e365-496e-b378-fcb5b0c71157
        scope: https://graph.microsoft.com/.default
    Response:
      Body:
        access_token: <access_token>
        expires_in: <expires_in>
        token_type: Bearer
        scope: https://graph.microsoft.com/.default
    
    2. API_2: Get all teams  
    GET: https://graph.microsoft.com/v1.0/teams 
      Request: 
        Header: 
          Authorization: Bearer <access_token>
      Response:
        {
        "@odata.context": "https://graph.microsoft.com/v1.0/$metadata#teams",
        "@odata.count": 19,
        "value": [
            {
                "id": "cd0ced03-2eae-43da-bdc2-26d85599d478",
                "createdDateTime": null,
                "displayName": "TeamsCX",
                "description": "Offical TeamsCX Operation",
                "internalId": null,
                "classification": null,
                "specialization": null,
                "visibility": "private",
                "webUrl": null,
                "isArchived": null,
                "isMembershipLimitedToOwners": null,
                "memberSettings": null,
                "guestSettings": null,
                "messagingSettings": null,
                "funSettings": null,
                "discoverySettings": null,
                "tagSettings": null,
                "summary": null
            },
            ...
            ]
      }
    
    3. API_3: Get teams member by team id. Teams member means the agent
    GET: https://graph.microsoft.com/v1.0/teams/{teamId}/members 
      Request: 
        Header: 
        Authorization: Bearer <access_token>
        Parameter: teamId 
      Response:
        {
        "@odata.context": "https://graph.microsoft.com/v1.0/$metadata#teams('05017198-df7e-4165-b9a8-7e6e14d78efd')/members",
        "@odata.count": 39,
        "value": [
            {
                "@odata.type": "#microsoft.graph.aadUserConversationMember",
                "id": "MCMjMSMjOTY3NzMxZjEtZTM2NS00OTZlLWIzNzgtZmNiNWIwYzcxMTU3IyMwNTAxNzE5OC1kZjdlLTQxNjUtYjlhOC03ZTZlMTRkNzhlZmQjI2ZlODFjOTA4LWJhZTYtNDNkZi04OWNmLTlkZDQ4YWE2NjU3ZQ==",
                "roles": [],
                "displayName": "TeamsCX Agent 244",
                "visibleHistoryStartDateTime": "0001-01-01T00:00:00Z",
                "userId": "fe81c908-bae6-43df-89cf-9dd48aa6657e",
                "email": null,
                "tenantId": "967731f1-e365-496e-b378-fcb5b0c71157"
            },
            ...
          ]
      }
    4. API_4: Get schedule shift of a team base on teamId and owner Id
    GET: https://graph.microsoft.com/v1.0/teams/{teamId}/schedule/shifts
      Request:
        Header:
          Authorization: Bearer <access_token>
          Header: "MS-APP-ACTS-AS" : "ownerId" 
          Parameter: teamId 
      Response:
        {
          "@odata.context": "https://graph.microsoft.com/v1.0/$metadata#teams('3b4d2e62-0516-47cf-a0c2-3b12f24a8edd')/schedule/shifts",
          "value": [
              {
                  "@odata.etag": "\"dc000a93-0000-0c00-0000-66b0aa560000\"",
                  "id": "SHFT_9070f496-316a-4e2d-a532-b3c6cededb02",
                  "createdDateTime": "2024-08-05T10:32:54.731Z",
                  "lastModifiedDateTime": "2024-08-05T10:32:54.731Z",
                  "schedulingGroupId": "TAG_fdae8ac4-1234-4349-ae6b-d84bc0aaa560",
                  "userId": "0abe58e3-ffef-4321-8c7d-a8fd279b461f",
                  "isStagedForDeletion": false,
                  "draftShift": null,
                  "lastModifiedBy": {
                      "application": null,
                      "device": null,
                      "user": {
                          "id": "0abe58e3-ffef-4321-8c7d-a8fd279b461f",
                          "displayName": "Demo agent 3",
                          "userIdentityType": "aadUser",
                          "tenantId": null
                      }
                  },
                  "sharedShift": {
                      "displayName": null,
                      "startDateTime": "2024-07-01T08:00:00Z",
                      "endDateTime": "2024-07-01T17:00:00Z",
                      "theme": "blue",
                      "notes": null,
                      "activities": [
                          {
                              "isPaid": true,
                              "startDateTime": "2024-07-01T12:00:00Z",
                              "endDateTime": "2024-07-01T13:00:00Z",
                              "code": "",
                              "displayName": "Break",
                              "theme": "yellow"
                          }
                      ]
                  }
              },
              ...
              ]
        }
    5. API_5: Get scheduling groups base on teamId and owner Id.
    GET: https://graph.microsoft.com/v1.0/teams/3b4d2e62-0516-47cf-a0c2-3b12f24a8edd/schedule/schedulingGroups
      Request:
        Header:
          Authorization: Bearer <access_token>
          Header: "MS-APP-ACTS-AS" : "ownerId" 
          Parameter: teamId 
      Response:
        {
        "@odata.context": "https://graph.microsoft.com/v1.0/$metadata#teams('3b4d2e62-0516-47cf-a0c2-3b12f24a8edd')/schedule/schedulingGroups",
        "@odata.count": 4,
        "value": [
            {
                "@odata.etag": "\"dc008c4c-0000-0c00-0000-66b0aa170000\"",
                "id": "TAG_101b0f5a-2cca-4612-aadf-b2e7a319b91f",
                "createdDateTime": null,
                "lastModifiedDateTime": null,
                "displayName": "",
                "isActive": false,
                "userIds": [
                    "5caf90db-ee82-4648-bccd-403070ebd6d0"
                ],
                "code": null,
                "lastModifiedBy": null
            },
            {
                "@odata.etag": "\"dc00b550-0000-0c00-0000-66b0aa1b0000\"",
                "id": "TAG_5a0e1279-1da2-4f7e-b0a1-47f5e29e6151",
                "createdDateTime": "2024-07-18T08:12:16.519Z",
                "lastModifiedDateTime": "2024-07-18T08:12:16.519Z",
                "displayName": "callqueue19",
                "isActive": false,
                "userIds": [],
                "code": null,
                "lastModifiedBy": {
                    "device": null,
                    "user": null,
                    "application": {
                        "id": "60f28e8a-b66f-49ec-9924-a72296021bb5",
                        "displayName": "tcx-teamsv3-dev-azure-bot",
                        "applicationIdentityType": "aadApplication"
                    }
                }
            },
            ...
          ]
    }
    ----------------------------------------------------------
    What I need in the Backend: 
    1. Sync data from Microsoft Graph API to DB
    - When run manually Backend API, it will get the data with timerange of 1 month ahead from Microsoft Graph API(API_1, API_2, API_3, API_4, API_5) and insert into the DB(tb_Queue, tb_Team, tb_Agent, tb_ScheduleShift, tb_SchedulingGroup)
    - Everyday at 12:00 AM, it will get the data with timerange of 1 month ahead from Microsoft Graph API(API_1, API_2, API_3, API_4, API_5) and insert into the DB(tb_Queue, tb_Team, tb_Agent, tb_ScheduleShift, tb_SchedulingGroup)
    - When the backend API run, it will check the data in the DB(tb_Queue, tb_Team, tb_Agent, tb_ScheduleShift, tb_SchedulingGroup) and compare with the data in the Microsoft Graph API(API_2, API_3, API_4, API_5). If the data is not the same, it will update the data in the DB(tb_Queue, tb_Team, tb_Agent, tb_ScheduleShift, tb_SchedulingGroup)
    
    
    